from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.data.callback import DepositWalletCallbackFactory, WithdrawWalletCallbackFactory, \
    DeleteDepositWalletCallbackFactory, DeleteWithdrawWalletCallbackFactory, WithdrawCallbackFactory


def main_keyboard() -> InlineKeyboardMarkup:
    """Use in main menu."""
    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å üë§", callback_data="profile")],
        [InlineKeyboardButton(text="–ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏ üí≥", callback_data="wallets")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="settings")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å ‚úâÔ∏è", callback_data="support")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1, 2)

    return keyboard.as_markup()


def new_menu_keyboard() -> InlineKeyboardMarkup:
    """New menu."""
    buttons = [
        [InlineKeyboardButton(text="–ú–µ–Ω—é üìì", callback_data="new_menu")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1)

    return keyboard.as_markup()

def profile_keyboard() -> InlineKeyboardMarkup:
    """Use in profile menu."""
    buttons = [
        [InlineKeyboardButton(text="–ú–æ–∏ –∫–æ—à–µ–ª—å–∫–∏ üí≥", callback_data="wallets")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1)

    return keyboard.as_markup()


def wallets_keyboard() -> InlineKeyboardMarkup:
    """Use in wallets menu."""
    buttons = [
        [InlineKeyboardButton(text="–¢–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç üìà", callback_data="trading_wallet")],
        [InlineKeyboardButton(text="–ù–∞ –¥–µ–ø–æ–∑–∏—Ç üì•", callback_data="deposit_wallets")],
        [InlineKeyboardButton(text="–ù–∞ –≤—ã–≤–æ–¥ üì§", callback_data="withdraw_wallets")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1, 1)

    return keyboard.as_markup()


def deposit_wallets_keyboard(wallets) -> InlineKeyboardMarkup:
    """Deposit wallets"""
    buttons = []

    for wallet in wallets:
        # TODO: Add wallet info into button text
        buttons.append([
            InlineKeyboardButton(text=f"–ö–æ—à–µ–ª–µ–∫ ID-{wallet[0].id}",
                                 callback_data=DepositWalletCallbackFactory(wallet_id=wallet[0].id).pack())
        ])

    buttons.extend([
        [InlineKeyboardButton(text="–ù–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ üîê", callback_data="new_deposit_wallet")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="wallets")],
    ])

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1)

    return keyboard.as_markup()


def withdraw_wallets_keyboard(wallets) -> InlineKeyboardMarkup:
    """Withdraw wallets"""
    buttons = []

    for wallet in wallets:
        # TODO: Add wallet info into button text
        buttons.append([
            InlineKeyboardButton(text=f"–ö–æ—à–µ–ª–µ–∫ ID-{wallet[0].id}",
                                 callback_data=WithdrawWalletCallbackFactory(wallet_id=wallet[0].id).pack())
        ])

    buttons.extend([
        [InlineKeyboardButton(text="–ù–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ üîê", callback_data="new_withdraw_wallet")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="wallets")],
    ])

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1)

    return keyboard.as_markup()


def back_to_deposit_wallets_keyboard() -> InlineKeyboardMarkup:
    """Back to Deposit wallets"""
    buttons = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="deposit_wallets")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1)

    return keyboard.as_markup()


def back_to_withdraw_wallets_keyboard() -> InlineKeyboardMarkup:
    """Back to Withdraw wallets"""
    buttons = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="withdraw_wallets")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1)

    return keyboard.as_markup()


def current_deposit_wallet_keyboard(wallet_id) -> InlineKeyboardMarkup:
    """Current Deposit wallets"""
    # TODO: Send to trading wallet
    # TODO: Update balance
    buttons = [
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–π —Å—á–µ—Ç üìà", callback_data="send_to_trading_wallet")],
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å üîÑ", callback_data="update")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ üóë",
                              callback_data=DeleteDepositWalletCallbackFactory(wallet_id=wallet_id).pack())],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="deposit_wallets")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1, 1)

    return keyboard.as_markup()


def current_withdraw_wallet_keyboard(wallet_id) -> InlineKeyboardMarkup:
    """Current Deposit wallets"""
    # TODO: Update balance
    buttons = [
        [InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ üí∏",
                              callback_data=WithdrawCallbackFactory(wallet_id=wallet_id).pack())],
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å üîÑ", callback_data="update")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ üóë",
                              callback_data=DeleteWithdrawWalletCallbackFactory(wallet_id=wallet_id).pack())],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="withdraw_wallets")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1, 1, 1)

    return keyboard.as_markup()


def trading_wallet_keyboard() -> InlineKeyboardMarkup:
    """Trading wallet kb"""
    buttons = [
        [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–∞ —Ç–æ—Ä–≥–æ–≤–æ–º —Å—á–µ—Ç–µ üìñ", callback_data="trading_history")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="wallets")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1)

    return keyboard.as_markup()


def trading_history_keyboard() -> InlineKeyboardMarkup:
    """Trading wallet kb"""
    buttons = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="trading_wallet")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1)

    return keyboard.as_markup()


def approve_withdraw_keyboard() -> InlineKeyboardMarkup:
    """approve withdraw kb"""
    buttons = [
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é ‚úÖ", callback_data="approve_withdraw")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="dont_approve_withdraw")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(2)

    return keyboard.as_markup()


def support_keyboard() -> InlineKeyboardMarkup:
    """Support menu"""
    buttons = [
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É üìù", callback_data="write_to_support")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1)

    return keyboard.as_markup()


def write_to_support_keyboard() -> InlineKeyboardMarkup:
    """Write Support menu"""
    buttons = [
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="support")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1)

    return keyboard.as_markup()


def settings_keyboard(notifications_status) -> InlineKeyboardMarkup:
    """Settings menu"""

    notifications_button_text = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if notifications_status else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"

    buttons = [
        [InlineKeyboardButton(text=notifications_button_text, callback_data="change_notifications_status")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="menu")],
    ]

    keyboard = InlineKeyboardBuilder(markup=buttons)
    keyboard.adjust(1, 1)

    return keyboard.as_markup()
